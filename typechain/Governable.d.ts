/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernableInterface extends ethers.utils.Interface {
  functions: {
    "gov_contract()": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isMastermind(address)": FunctionFragment;
    "isPartner(address)": FunctionFragment;
    "isUser(address)": FunctionFragment;
    "setGovernanceContract(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "gov_contract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMastermind",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isPartner", values: [string]): string;
  encodeFunctionData(functionFragment: "isUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGovernanceContract",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "gov_contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMastermind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPartner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceContract",
    data: BytesLike
  ): Result;

  events: {};
}

export class Governable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernableInterface;

  functions: {
    gov_contract(overrides?: CallOverrides): Promise<[string]>;

    "gov_contract()"(overrides?: CallOverrides): Promise<[string]>;

    isGovernor(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMastermind(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartner(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUser(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  gov_contract(overrides?: CallOverrides): Promise<string>;

  "gov_contract()"(overrides?: CallOverrides): Promise<string>;

  isGovernor(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isGovernor(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMastermind(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isMastermind(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartner(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isPartner(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUser(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isUser(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setGovernanceContract(
    _gov_contract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernanceContract(address)"(
    _gov_contract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    gov_contract(overrides?: CallOverrides): Promise<string>;

    "gov_contract()"(overrides?: CallOverrides): Promise<string>;

    isGovernor(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMastermind(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartner(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUser(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    gov_contract(overrides?: CallOverrides): Promise<BigNumber>;

    "gov_contract()"(overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMastermind(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartner(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUser(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gov_contract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov_contract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGovernor(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMastermind(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartner(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUser(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
