/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DPexFeeAggregatorInterface extends ethers.utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addFeeToken(address)": FunctionFragment;
    "addTokenFee(address,uint256)": FunctionFragment;
    "addTokenHolder(address)": FunctionFragment;
    "calculateFee(address,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "dpexFee()": FunctionFragment;
    "feeTokens()": FunctionFragment;
    "getClaimedRewards(address)": FunctionFragment;
    "getSnapshot(uint256)": FunctionFragment;
    "getSnapshotRewards(uint256,address)": FunctionFragment;
    "getTotalRewards(address)": FunctionFragment;
    "getUnclaimedRewards(address)": FunctionFragment;
    "gov_contract()": FunctionFragment;
    "isFeeToken(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isMastermind(address)": FunctionFragment;
    "isPartner(address)": FunctionFragment;
    "isTokenHolder(address)": FunctionFragment;
    "isUser(address)": FunctionFragment;
    "latestRewardSnapshotId()": FunctionFragment;
    "psi()": FunctionFragment;
    "removeFeeToken(address)": FunctionFragment;
    "removeTokenHolder(address)": FunctionFragment;
    "rewardSnapshots(uint256)": FunctionFragment;
    "router()": FunctionFragment;
    "setDPexFee(uint256)": FunctionFragment;
    "setGovernanceContract(address)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "takeSnapshotWithRewards(uint256)": FunctionFragment;
    "tokensGathered(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "addFeeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addTokenFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "dpexFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimedRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSnapshot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSnapshotRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gov_contract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFeeToken", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMastermind",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isPartner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTokenHolder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latestRewardSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "psi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFeeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDPexFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "takeSnapshotWithRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensGathered",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dpexFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnapshotRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gov_contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFeeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMastermind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPartner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRewardSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "psi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDPexFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeSnapshotWithRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensGathered",
    data: BytesLike
  ): Result;

  events: {};
}

export class DPexFeeAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DPexFeeAggregatorInterface;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    "WETH()"(overrides?: CallOverrides): Promise<[string]>;

    addFeeToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFeeToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addTokenFee(
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTokenFee(address,uint256)"(
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addTokenHolder(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTokenHolder(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "calculateFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; amountLeft: BigNumber }
    >;

    "calculateFee(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; amountLeft: BigNumber }
    >;

    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    dpexFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dpexFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "feeTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getClaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    "getClaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    getSnapshot(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPsi: BigNumber }
    >;

    "getSnapshot(uint256)"(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPsi: BigNumber }
    >;

    getSnapshotRewards(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    "getSnapshotRewards(uint256,address)"(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    getTotalRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    "getTotalRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    getUnclaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    "getUnclaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    gov_contract(overrides?: CallOverrides): Promise<[string]>;

    "gov_contract()"(overrides?: CallOverrides): Promise<[string]>;

    isFeeToken(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isFeeToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGovernor(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMastermind(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPartner(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenHolder(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isTokenHolder(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUser(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestRewardSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "latestRewardSnapshotId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    psi(overrides?: CallOverrides): Promise<[string]>;

    "psi()"(overrides?: CallOverrides): Promise<[string]>;

    removeFeeToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFeeToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeTokenHolder(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeTokenHolder()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPSI: BigNumber }
    >;

    "rewardSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPSI: BigNumber }
    >;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setDPexFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDPexFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRouter(address)"(
      _router: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    takeSnapshotWithRewards(
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "takeSnapshotWithRewards(uint256)"(
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokensGathered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokensGathered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  "WETH()"(overrides?: CallOverrides): Promise<string>;

  addFeeToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFeeToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addTokenFee(
    token: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTokenFee(address,uint256)"(
    token: string,
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addTokenHolder(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTokenHolder(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "calculateFee(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fee: BigNumber; amountLeft: BigNumber }
  >;

  "calculateFee(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fee: BigNumber; amountLeft: BigNumber }
  >;

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  dpexFee(overrides?: CallOverrides): Promise<BigNumber>;

  "dpexFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeTokens(overrides?: CallOverrides): Promise<string[]>;

  "feeTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getClaimedRewards(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getClaimedRewards(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSnapshot(
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; totalPsi: BigNumber }>;

  "getSnapshot(uint256)"(
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; totalPsi: BigNumber }>;

  getSnapshotRewards(
    snapshotId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSnapshotRewards(uint256,address)"(
    snapshotId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalRewards(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnclaimedRewards(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUnclaimedRewards(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov_contract(overrides?: CallOverrides): Promise<string>;

  "gov_contract()"(overrides?: CallOverrides): Promise<string>;

  isFeeToken(token: string, overrides?: CallOverrides): Promise<boolean>;

  "isFeeToken(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGovernor(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isGovernor(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMastermind(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isMastermind(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPartner(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isPartner(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenHolder(user: string, overrides?: CallOverrides): Promise<boolean>;

  "isTokenHolder(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUser(_address: string, overrides?: CallOverrides): Promise<boolean>;

  "isUser(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestRewardSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  "latestRewardSnapshotId()"(overrides?: CallOverrides): Promise<BigNumber>;

  psi(overrides?: CallOverrides): Promise<string>;

  "psi()"(overrides?: CallOverrides): Promise<string>;

  removeFeeToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFeeToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeTokenHolder(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeTokenHolder()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardSnapshots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; totalPSI: BigNumber }>;

  "rewardSnapshots(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { time: BigNumber; totalPSI: BigNumber }>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setDPexFee(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDPexFee(uint256)"(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernanceContract(
    _gov_contract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernanceContract(address)"(
    _gov_contract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRouter(
    _router: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRouter(address)"(
    _router: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  takeSnapshotWithRewards(
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "takeSnapshotWithRewards(uint256)"(
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokensGathered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokensGathered(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    "WETH()"(overrides?: CallOverrides): Promise<string>;

    addFeeToken(token: string, overrides?: CallOverrides): Promise<void>;

    "addFeeToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenFee(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTokenFee(address,uint256)"(
      token: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenHolder(user: string, overrides?: CallOverrides): Promise<void>;

    "addTokenHolder(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "calculateFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; amountLeft: BigNumber }
    >;

    "calculateFee(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { fee: BigNumber; amountLeft: BigNumber }
    >;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    dpexFee(overrides?: CallOverrides): Promise<BigNumber>;

    "dpexFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTokens(overrides?: CallOverrides): Promise<string[]>;

    "feeTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getClaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSnapshot(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPsi: BigNumber }
    >;

    "getSnapshot(uint256)"(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPsi: BigNumber }
    >;

    getSnapshotRewards(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSnapshotRewards(uint256,address)"(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnclaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnclaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov_contract(overrides?: CallOverrides): Promise<string>;

    "gov_contract()"(overrides?: CallOverrides): Promise<string>;

    isFeeToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    "isFeeToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGovernor(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMastermind(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPartner(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenHolder(user: string, overrides?: CallOverrides): Promise<boolean>;

    "isTokenHolder(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUser(_address: string, overrides?: CallOverrides): Promise<boolean>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestRewardSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRewardSnapshotId()"(overrides?: CallOverrides): Promise<BigNumber>;

    psi(overrides?: CallOverrides): Promise<string>;

    "psi()"(overrides?: CallOverrides): Promise<string>;

    removeFeeToken(token: string, overrides?: CallOverrides): Promise<void>;

    "removeFeeToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTokenHolder(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTokenHolder()"(overrides?: CallOverrides): Promise<void>;

    rewardSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPSI: BigNumber }
    >;

    "rewardSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { time: BigNumber; totalPSI: BigNumber }
    >;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setDPexFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setDPexFee(uint256)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    "setRouter(address)"(
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    takeSnapshotWithRewards(
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "takeSnapshotWithRewards(uint256)"(
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensGathered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokensGathered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    "WETH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "addFeeToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addTokenFee(
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTokenFee(address,uint256)"(
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addTokenHolder(user: string, overrides?: Overrides): Promise<BigNumber>;

    "addTokenHolder(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "calculateFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFee(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    dpexFee(overrides?: CallOverrides): Promise<BigNumber>;

    "dpexFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSnapshot(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSnapshot(uint256)"(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSnapshotRewards(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSnapshotRewards(uint256,address)"(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnclaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnclaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov_contract(overrides?: CallOverrides): Promise<BigNumber>;

    "gov_contract()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFeeToken(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isFeeToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGovernor(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMastermind(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPartner(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenHolder(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isTokenHolder(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUser(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestRewardSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRewardSnapshotId()"(overrides?: CallOverrides): Promise<BigNumber>;

    psi(overrides?: CallOverrides): Promise<BigNumber>;

    "psi()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFeeToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "removeFeeToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeTokenHolder(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeTokenHolder()"(overrides?: Overrides): Promise<BigNumber>;

    rewardSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDPexFee(fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setDPexFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRouter(_router: string, overrides?: Overrides): Promise<BigNumber>;

    "setRouter(address)"(
      _router: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    takeSnapshotWithRewards(
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "takeSnapshotWithRewards(uint256)"(
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokensGathered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokensGathered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WETH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addFeeToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFeeToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addTokenFee(
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTokenFee(address,uint256)"(
      token: string,
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addTokenHolder(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTokenHolder(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "calculateFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateFee(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    dpexFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dpexFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnapshot(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSnapshot(uint256)"(
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnapshotRewards(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSnapshotRewards(uint256,address)"(
      snapshotId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnclaimedRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnclaimedRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov_contract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov_contract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFeeToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFeeToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernor(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGovernor(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMastermind(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMastermind(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPartner(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPartner(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenHolder(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenHolder(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUser(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUser(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestRewardSnapshotId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestRewardSnapshotId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    psi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "psi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFeeToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFeeToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeTokenHolder(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeTokenHolder()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDPexFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDPexFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernanceContract(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernanceContract(address)"(
      _gov_contract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRouter(address)"(
      _router: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    takeSnapshotWithRewards(
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "takeSnapshotWithRewards(uint256)"(
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokensGathered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensGathered(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
